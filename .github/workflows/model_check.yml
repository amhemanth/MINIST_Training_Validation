name: Model Testing

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  MAX_PARAMS: 20000
  MIN_ACCURACY: 98.0

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
        cache: 'pip'
        cache-dependency-path: |
          requirements.txt
          setup.py

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov torch-model-summary

    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html

    - name: Validate model architecture
      run: |
        python -c "
        from src.models.mnist_model import Net
        import torch
        from torchsummary import summary
        
        model = Net()
        total_params = sum(p.numel() for p in model.parameters())
        assert total_params < ${{ env.MAX_PARAMS }}, f'Model has {total_params} parameters, should be < ${{ env.MAX_PARAMS }}'
        print(f'Model validated: {total_params} parameters')
        
        summary(model, (1, 28, 28))
        "

    - name: Run quick training
      run: |
        python -m src.training.train_mnist --quick-test --epochs 1 --batch-size 64

    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: |
          coverage.xml
          htmlcov/
        retention-days: 5

    - name: Upload model artifacts
      uses: actions/upload-artifact@v3
      with:
        name: model-checkpoints
        path: checkpoints/
        retention-days: 5 