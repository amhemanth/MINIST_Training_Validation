name: Model Testing and Validation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  MAX_PARAMS: 20000
  MIN_ACCURACY: 98.0
  PYTHON_VERSION: 3.8
  PYTHONPATH: ${{ github.workspace }}

jobs:
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3.5.3
    - name: Set up Python
      uses: actions/setup-python@v4.7.1
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort mypy pytest
    - name: Check code formatting with Black
      run: black --check src tests
    - name: Check imports with isort
      run: isort --check-only src tests
    - name: Lint with flake8
      run: flake8 src tests --max-line-length=100
    - name: Type checking with mypy
      run: mypy src tests

  unit-tests:
    needs: code-quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3.5.3
    - name: Set up Python
      uses: actions/setup-python@v4.7.1
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
        pip install -e .
    - name: Run unit tests
      run: |
        pytest tests/unit -v --cov=src --cov-report=xml --cov-report=html
    - name: Upload unit test coverage
      uses: actions/upload-artifact@v4.0.0
      with:
        name: unit-test-coverage
        path: |
          coverage.xml
          htmlcov/
        retention-days: 5

  integration-tests:
    needs: unit-tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3.5.3
    - name: Set up Python
      uses: actions/setup-python@v4.7.1
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
        pip install -e .
    - name: Run integration tests
      run: |
        pytest tests/integration -v --cov=src --cov-report=xml --cov-report=html
    - name: Upload integration test coverage
      uses: actions/upload-artifact@v4.0.0
      with:
        name: integration-test-coverage
        path: |
          coverage.xml
          htmlcov/
        retention-days: 5

  model-validation:
    needs: integration-tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3.5.3
    - name: Set up Python
      uses: actions/setup-python@v4.7.1
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install torch-model-summary
        pip install -e .
    - name: Validate model architecture
      run: |
        python -c "
        from src.models.mnist_model import Net
        from torchinfo import summary
        model = Net()
        model_stats = summary(model, input_size=(1, 1, 28, 28), verbose=0)
        total_params = sum(p.numel() for p in model.parameters())
        assert total_params < int('${{ env.MAX_PARAMS }}'), f'Model has {total_params} parameters, exceeding limit of ${{ env.MAX_PARAMS }}'
        print(f'Model validation passed: {total_params} parameters')
        "

  model-performance:
    needs: model-validation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3.5.3
    - name: Set up Python
      uses: actions/setup-python@v4.7.1
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
    - name: Quick training test
      run: |
        python train.py --epochs 1 --batch-size 64 --quick-test
    - name: Upload model artifacts
      uses: actions/upload-artifact@v4.0.0
      with:
        name: model-checkpoint
        path: checkpoints/
        retention-days: 5 